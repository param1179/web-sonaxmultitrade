{"version":3,"file":"static/js/304.1096cfa1.chunk.js","mappings":"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","sources":["conts/helper.js","validators/auth.schema.js","views/adminUsers/Rewards.js"],"sourcesContent":["export const HELP = {\n  PASSWORD_REGEXP: /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,}$/,\n  EMAIL_REGEXP: /^((?!\\.)[\\w\\-_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$/,\n  phoneRegExp:\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/,\n}\n","import { HELP } from '../conts'\nimport * as yup from 'yup'\n\nexport const signIn = yup.object().shape({\n  email: yup\n    .string()\n    .matches(HELP.EMAIL_REGEXP, 'Email is not correct!')\n    .required('Email is require field!'),\n  password: yup\n    .string()\n    .matches(HELP.PASSWORD_REGEXP, 'Password is not correct!')\n    .max(15, 'Max 15 symbol!')\n    .required('Password is require field!'),\n})\n\nexport const signUp = yup.object().shape({\n  password: yup\n    .string()\n    .matches(HELP.PASSWORD_REGEXP, 'Password is not correct!')\n    .max(15, 'Max 15 symbol!')\n    .required('Password is require field!'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match!')\n    .required('Passwords must match!'),\n})\n\nexport const createAdmin = yup.object().shape({\n  email: yup\n    .string()\n    .matches(HELP.EMAIL_REGEXP, 'Email is not correct!')\n    .required('Email is require field!'),\n  password: yup\n    .string()\n    .matches(HELP.PASSWORD_REGEXP, 'Password is not correct!')\n    .max(15, 'Max 15 symbol!')\n    .required('Password is require field!'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match!')\n    .required('Passwords must match!'),\n})\n\nexport const changePassword = yup.object().shape({\n  oldPassword: yup.string().max(15, 'Max 15 symbol!').required('Password is require field!'),\n  password: yup\n    .string()\n    .max(15, 'Max 15 symbol!')\n    .notOneOf([yup.ref('oldPassword'), null], 'Password should not same as old password!')\n    .required('Password is require field!'),\n  cPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match!')\n    .required('Passwords must match!'),\n})\n\nexport const createUser = yup.object().shape({\n  firstName: yup.string().required('First name is require field!'),\n  lastName: yup.string().required('Last name is require field!'),\n  gender: yup.string().required('Last name is require field!'),\n  dob: yup.date().required('Date of birth required'),\n  nomineeFirstName: yup.string().required('First name is require field!'),\n  nomineeLastName: yup.string().required('First name is require field!'),\n  nomineeDob: yup.date().required('Date of birth required'),\n  nomineeRelation: yup.string().required('Relation is require field!'),\n  mobile: yup\n    .string()\n    .matches(HELP.phoneRegExp, 'Phone number is not valid')\n    .required('Mobile is require field!')\n    .min(10, 'Phone number too short')\n    .max(10, 'Phone number too long'),\n  password: yup.string().max(15, 'Max 15 symbol!').required('Password is require field!'),\n  cpassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match!')\n    .required('Passwords must match!'),\n})\n\nexport const createCoupone = yup.object().shape({\n  code: yup.string().max(30, 'Max value 20.').required('Coupon Name is require field!'),\n  percent: yup\n    .number()\n    .typeError('You must specify a number')\n    .min(1, 'Min value 1.')\n    .max(100, 'Max value 100.')\n    .required('This field is required!'),\n  endDate: yup.date().min(new Date(), \"end date can't be before current date\"),\n})\n\nexport const createSchool = yup.object().shape({\n  email: yup\n    .string()\n    .matches(HELP.EMAIL_REGEXP, 'Email is not correct!')\n    .required('Email is require field!'),\n  schoolName: yup.string().required('Name is require field!'),\n})\n\nexport const createRewards = yup.object().shape({\n  rewardLevel: yup.string().required('Reward Level is require field!'),\n  onPairs: yup.number().required('Pairs is require field!'),\n  reward: yup.string().required('Reward name is require field!'),\n})\n\nexport const updateUser = yup.object().shape({\n  firstName: yup.string().required('First name is require field!'),\n  lastName: yup.string().required('Last name is require field!'),\n  mobile: yup\n    .string()\n    .matches(HELP.phoneRegExp, 'Phone number is not valid')\n    .required('Mobile is require field!')\n    .min(10, 'Phone number too short')\n    .max(10, 'Phone number too long'),\n})\n\nexport const userSignIn = yup.object().shape({\n  uId: yup.string().required('UID is require field!'),\n  password: yup.string().max(15, 'Max 15 symbol!').required('Password is require field!'),\n})\n\nexport const changePasswordByAdmin = yup.object().shape({\n  password: yup.string().max(15, 'Max 15 symbol!').required('Password is require field!'),\n  cpassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match!')\n    .required('Passwords must match!'),\n})\n","import React from 'react'\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { adminApi } from 'src/APIs'\r\nimport { useFormik } from 'formik'\r\nimport { authSchema } from 'src/validators'\r\n\r\nconst Rewards = () => {\r\n  const { isLoading, data: rewards, refetch } = adminApi.useGetRewards()\r\n  const {\r\n    values,\r\n    handleChange,\r\n    submitForm,\r\n    errors,\r\n    isValid,\r\n    dirty,\r\n    resetForm,\r\n    touched,\r\n    handleBlur,\r\n  } = useFormik({\r\n    initialValues: {\r\n      rewardLevel: '',\r\n      onPairs: '',\r\n      reward: '',\r\n    },\r\n    validationSchema: authSchema.createRewards,\r\n    onSubmit: (values) => onCreate(values),\r\n  })\r\n\r\n  const mutateCreate = adminApi.useCreateAdminRewards()\r\n\r\n  const onCreate = async (body) => {\r\n    const resp = await mutateCreate.mutateAsync(body)\r\n    if (resp?.status === 200) {\r\n      refetch()\r\n      resetForm()\r\n    }\r\n  }\r\n  return (\r\n    <CRow>\r\n      <CCol md={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            <strong>Rewards</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CForm>\r\n              <CRow>\r\n                <CCol md={3}>\r\n                  <div className=\"mb-3\">\r\n                    <CFormInput\r\n                      type=\"text\"\r\n                      id=\"rewardLevelControlInput\"\r\n                      placeholder=\"Reward Level\"\r\n                      value={values.rewardLevel}\r\n                      name=\"rewardLevel\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={errors.rewardLevel}\r\n                    />\r\n                    {touched.rewardLevel && errors && (\r\n                      <p className=\"text-danger\">{errors.rewardLevel}</p>\r\n                    )}\r\n                  </div>\r\n                </CCol>\r\n                <CCol md={3}>\r\n                  <div className=\"mb-3\">\r\n                    <CFormInput\r\n                      type=\"number\"\r\n                      id=\"onPairsControlInput\"\r\n                      placeholder=\"On Pairs\"\r\n                      value={values.onPairs}\r\n                      name=\"onPairs\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={errors.onPairs}\r\n                    />\r\n                    {touched.onPairs && errors && <p className=\"text-danger\">{errors.onPairs}</p>}\r\n                  </div>\r\n                </CCol>\r\n                <CCol md={3}>\r\n                  <div className=\"mb-3\">\r\n                    <CFormInput\r\n                      type=\"text\"\r\n                      id=\"rewardControlInput\"\r\n                      placeholder=\"Reward Name\"\r\n                      value={values.reward}\r\n                      name=\"reward\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={errors.reward}\r\n                    />\r\n                    {touched.reward && errors && <p className=\"text-danger\">{errors.reward}</p>}\r\n                  </div>\r\n                </CCol>\r\n                <CCol md={3}>\r\n                  <div className=\"d-grid gap-2 mb-3\">\r\n                    <CButton\r\n                      color=\"primary\"\r\n                      onClick={submitForm}\r\n                      disabled={!(isValid && dirty) || mutateCreate.isLoading}\r\n                    >\r\n                      Save\r\n                    </CButton>\r\n                  </div>\r\n                </CCol>\r\n              </CRow>\r\n            </CForm>\r\n            <CRow className=\"table-row\">\r\n              <CTable align=\"middle\" bordered className=\"mb-0 border\" hover responsive striped>\r\n                <CTableHead color=\"light\">\r\n                  <CTableRow>\r\n                    <CTableHeaderCell>S. No.</CTableHeaderCell>\r\n                    <CTableHeaderCell>Reward Level</CTableHeaderCell>\r\n                    <CTableHeaderCell>On Pairs</CTableHeaderCell>\r\n                    <CTableHeaderCell>Reward Name</CTableHeaderCell>\r\n                  </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                  {!isLoading &&\r\n                    rewards?.rewards.map((item, index) => (\r\n                      <CTableRow key={item._id}>\r\n                        <CTableDataCell>{index + 1}</CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <div>{item.rewardLevel}</div>\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <h5>\r\n                            <CBadge color={'success'}>{item.onPairs}</CBadge>\r\n                          </h5>\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>{item.reward}</CTableDataCell>\r\n                      </CTableRow>\r\n                    ))}\r\n                </CTableBody>\r\n              </CTable>\r\n            </CRow>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Rewards\r\n"],"names":["HELP","signIn","yup","shape","email","matches","required","password","max","changePassword","confirmPassword","oneOf","oldPassword","notOneOf","cPassword","createUser","firstName","lastName","gender","dob","nomineeFirstName","nomineeLastName","nomineeDob","nomineeRelation","mobile","min","cpassword","createRewards","code","percent","typeError","endDate","Date","schoolName","rewardLevel","onPairs","reward","updateUser","userSignIn","uId","changePasswordByAdmin","adminApi","isLoading","rewards","data","refetch","useFormik","initialValues","validationSchema","authSchema","onSubmit","values","onCreate","handleChange","submitForm","errors","isValid","dirty","resetForm","touched","handleBlur","mutateCreate","body","mutateAsync","resp","status","md","className","type","id","placeholder","value","name","onChange","onBlur","error","color","onClick","disabled","align","bordered","hover","responsive","striped","map","item","index","_id"],"sourceRoot":""}