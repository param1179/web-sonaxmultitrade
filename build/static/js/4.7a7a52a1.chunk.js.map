{"version":3,"file":"static/js/4.7a7a52a1.chunk.js","mappings":"0SAwFA,MA/EA,SAASA,EAAW,GAAwC,IAAD,MAArCC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAG,EAAHA,IAAKC,EAAU,EAAVA,WAAYC,EAAG,EAAHA,IAC5CC,GAAaC,EAAAA,EAAAA,MACXC,EAAsBN,EAAtBM,QAASC,EAAaP,EAAbO,UAEjBC,EAAAA,EAAAA,YAAU,WACRT,GAAS,CACX,GAAG,IAEH,IA6CgE,EANhE,EAAkCU,EAAAA,GAAAA,YAAqBH,EAAQI,KAAvDC,EAAS,EAATA,UAAiBC,EAAI,EAAVC,KACfC,EAAsB,OAAb,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMG,UAAsB,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMC,YAAI,WAAN,EAAJ,EAAYN,UACzCS,EAA0B,OAAb,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMG,QAAqB,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMC,YAAI,WAAN,EAAJ,EAAYG,OAAS,GAEnDC,EAAcD,GAA4B,IAAlBA,EAAOE,OAyBrC,OAvBID,GAAmD,WAAhC,OAAJL,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMC,YAAI,WAAN,EAAJ,EAAYG,OAAO,GAAGG,aACvCH,EAAa,OAAJJ,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMC,YAAI,WAAN,EAAJ,EAAYG,OAAOI,YAiB5B,SAAC,IAAQ,CAAWC,OA7DlB,SAACnB,EAAU,WACT,iBAEEoB,KAAK,SACLC,QAAS,kBACNjB,EAAQkB,IAOLpB,EAAW,SAAU,CACnBqB,MAAO,CACLC,OAAQpB,EAAQI,OARpBN,EAAW,OAAQ,CACjBqB,MAAO,CACLtB,IAAoB,kBAARA,EAAmBA,EAAMI,EACrCY,UAAmB,IAARlB,EAAY,OAAS,UAOlC,EACP,WAED,SAAC,KAAM,CAAC0B,IAAKC,EAAOC,OAAQ,GAAIC,IAAI,UACpC,iBACEC,UACGzB,EAAQkB,IACwC,6CAE1ClB,EAAQ0B,YAAkC,gBAApB,mBAFzB,8CAIL,WAED,yBAAM1B,EAAQkB,IAAMlB,EAAQkB,IAAM,MAClC,yBAAMlB,EAAQ2B,oBA+BoB,SAbtChB,GAAelB,EAAQ,EAClBiB,EAAOkB,KAAI,SAACC,EAAOC,GACxB,OAAOzB,GACL,8BAAE,QAEF,SAACb,EAAU,CAASE,KAAMmC,EAAOlC,IAAKmC,EAAGlC,WAAYA,EAAYC,IAAKW,GAArDsB,EAErB,IAEK,MAIQnC,EAMnB,E,sBClBA,I,sBC9DIoC,EAAQ,GAwDZ,I,EAAA,EAvDA,SAASC,EAAW,GAAmC,IAAD,IAAhCvC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAG,EAAHA,IAAKC,EAAU,EAAVA,WAC9BI,EAAYN,EAAZM,QACR+B,EAAK,kBAAOA,GAAK,CAAmB,QAAV,OAAP/B,QAAO,IAAPA,OAAO,EAAPA,EAASI,MAAgBJ,KAC5CE,EAAAA,EAAAA,YAAU,WACRT,GAAS,CACX,GAAG,IAEH,MAAkCU,EAAAA,GAAAA,YAA4B,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASI,KAAxDC,EAAS,EAATA,UAAiBC,EAAI,EAAVC,KAEfG,GADsB,OAAb,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMG,UAAsB,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMC,YAAI,OAAV,EAAYN,UACf,OAAb,OAAJK,QAAI,IAAJA,OAAI,EAAJA,EAAMG,QAAqB,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMC,YAAI,WAAN,EAAJ,EAAYG,OAAS,IAEnDC,EAAcD,GAA4B,IAAlBA,EAAOE,OAyCrC,OAzBE,gCACmB,OAAhBZ,EAAQI,MACP,UAAC,KAAS,CAAC,QAAM,qBAAoB,WACnC,SAAC,KAAc,UAAE,OACjB,UAAC,KAAc,YACb,0BAAa,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAAS2B,WAAY,KAAa,OAAP3B,QAAO,IAAPA,OAAO,EAAPA,EAASiC,aAC1C,iBAAKR,UAAU,6BAA4B,WACzC,0BAAO,UAAe,mBAAiBS,EAAAA,GAAAA,eAAiC,OAAPlC,QAAO,IAAPA,OAAO,EAAPA,EAASmC,kBAI9E,SAAC,KAAc,UAAS,OAAPnC,QAAO,IAAPA,OAAO,EAAPA,EAASkB,OAC1B,SAAC,KAAc,WACb,yBACE,SAAC,KAAM,CAACkB,GAAW,OAAPpC,QAAO,IAAPA,OAAO,EAAPA,EAASI,IAAKiC,MAAc,OAAPrC,QAAO,IAAPA,GAAAA,EAAS0B,YAAc,UAAY,SAAS,SACnE,OAAP1B,QAAO,IAAPA,GAAAA,EAAS0B,YAAc,SAAW,mBAbA/B,GAf3CgB,EACKD,EAAOkB,KAAI,SAACC,EAAOC,GAAO,IAAD,EAC9B,OAAOzB,GAAqC,QAAnB,OAALwB,QAAK,IAALA,GAAc,QAAT,EAALA,EAAO7B,eAAO,WAAT,EAAL,EAAgBI,MAClC,8BAAE,QAEF,SAAC4B,EAAU,CAACvC,MAAOA,IAAiBC,KAAMmC,EAAOlC,IAAKmC,EAAGlC,WAAYA,GAApCkC,EAErC,IAEK,OA8BX,EC3BA,IAAMlC,EAAa0C,EAAAA,GAAAA,IAAU,mEA4J7B,MAxJA,WAAqB,IAAD,0BAEoB,GAAbC,EAAAA,EAAAA,MAAjBpB,MAAAA,OAAK,MAAG,KAAI,EACdqB,GAAWD,EAAAA,EAAAA,MACXE,GAAW1C,EAAAA,EAAAA,MACX2C,GAAOC,EAAAA,EAAAA,kBACb,GAA4BC,EAAAA,EAAAA,UAAS,GAAE,eAAhCC,EAAM,KAAEC,EAAS,KACxB,GAAwBF,EAAAA,EAAAA,UAAS,CAAEG,MAAO,EAAGC,OAAQ,EAAGC,SAAU,IAAI,eACtE,GADW,KAAS,MACUL,EAAAA,EAAAA,UAAS,CACrCM,SAAS,EACTC,SAAU,UACV,eAHKD,EAAO,KAAEE,EAAU,MAI1BlD,EAAAA,EAAAA,YAAU,WACRuC,EAASD,EAASa,SAAU,CAAC,EAC/B,GAAG,CAACR,IACJ,IAIiD,EAJ3CzB,EAASD,GAAc,OAALA,QAAK,IAALA,GAAAA,EAAOC,OAAc,OAALD,QAAK,IAALA,OAAK,EAALA,EAAOC,OAASsB,EAAKtC,IACrDG,EAASJ,EAAAA,GAAAA,YAAqBiB,GAA9Bb,KACR,EAAgDJ,EAAAA,GAAAA,eAAwB+C,EAAQC,SAAU/B,GAAvEkC,EAAI,EAAfC,UAAuBC,EAAG,EAATjD,KAAWkD,EAAO,EAAPA,QAChC/C,EAAa,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYG,OAQzB,MAPwC,WAAhC,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYG,OAAO,GAAGG,aACxBH,EAAa,OAAJH,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYG,OAAOI,YAE9BZ,EAAAA,EAAAA,YAAU,WACRuD,GACF,GAAG,CAACP,EAAQC,YAGV,iCACE,SAAC,KAAI,WACH,SAAC,KAAI,CAACO,GAAI,GAAG,UACX,UAAC,KAAK,CAACjC,UAAU,OAAM,WACrB,UAAC,KAAW,YACV,4BAAQ,qBACR,SAAC,KAAO,CACNY,MAAM,eACNpB,QAAS,kBAAMmC,EAAW,CAAEF,SAAUA,EAAQA,QAASC,SAAU,SAAU,EAC3E1B,UAAU,YAAW,SACtB,WAGD,SAAC,KAAO,CACNY,MAAM,eACNpB,QAAS,kBAAMmC,EAAW,CAAEF,SAAUA,EAAQA,QAASC,SAAU,QAAS,EAC1E1B,UAAU,YAAW,SACtB,aAIH,UAAC,KAAS,CAACA,UAAU,YAAW,UAC7BN,IAAc,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,UACf,UAAC,KAAO,CAACuC,KAAK,KAAK1C,QAAS,kBAAM6B,EAAUc,KAAKC,SAAS,EAAC,UACxD,aACD,SAAC,IAAK,CAACC,KAAMC,EAAAA,QAGjB,SAAC,IAAI,CACHC,UAAW,MACXC,UAAW,QACXC,iBAAkB,OAClBnD,OACE,UAACnB,EAAU,YACT,SAAC,KAAM,CAACyB,IAAKC,EAAOC,OAAQ,GAAIC,IAAI,UACpC,iBACEC,UAAS,6CACNN,EAIO,OAAJZ,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAU,QAAV,EAAV,EAAYN,gBAAQ,OAApB,EAAsByB,YACtB,gBACA,kBALI,OAAJnB,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAU,QAAV,EAAV,EAAYN,gBAAQ,OAApB,EAAsByB,YACpB,gBACA,cAIL,WAEH,yBAAU,OAAJnB,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAU,QAAV,EAAV,EAAYN,gBAAQ,OAApB,EAAsBiB,IAAU,OAAJX,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAU,QAAV,EAAV,EAAYN,gBAAQ,WAAhB,EAAJ,EAAsBiB,IAAM,MAC9D,yBAAU,OAAJX,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAU,QAAV,EAAV,EAAYN,gBAAQ,WAAhB,EAAJ,EAAsB0B,kBAGjC,SAEAjB,IACO,QADD,EACLA,SAAM,aAAN,EAAQkB,KAAI,SAACC,EAAOC,GAClB,OACE,SAAC,EAAU,CACTrC,MAlFD,EAoFCC,KAAMmC,EACNlC,IAAKmC,EACLlC,WAAYA,EACZC,IAAS,OAAJU,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KAAKN,UAJX6B,EAOX,kBAOZ,UAAC,KAAM,CACLqC,WAAW,KACXjB,QAASA,EAAQA,QACjBkB,QAAS,WACPhB,GAAW,kBAAKF,GAAO,IAAEA,SAAS,IACpC,EAAE,WAEF,SAAC,KAAY,WACX,UAAC,KAAW,WAAEA,EAAQC,SAAS,wBAEjC,SAAC,KAAU,CAAC1B,UAAU,gBAAe,UACnC,UAAC,KAAI,YACD6B,IACA,UAAC,KAAO,YACN,yBACE,SAAC,KAAM,CAACjB,MAAO,UAAU,SAAE,WAAe,OAAHmB,QAAG,IAAHA,OAAG,EAAHA,EAAKT,YAE9C,yBACE,SAAC,KAAM,CAACV,MAAO,UAAU,SAAE,YAAgB,OAAHmB,QAAG,IAAHA,OAAG,EAAHA,EAAKR,aAE/C,yBACE,SAAC,KAAM,CAACX,MAAO,SAAS,SAAE,cAAkB,OAAHmB,QAAG,IAAHA,OAAG,EAAHA,EAAKP,kBAIpD,UAAC,KAAM,CAACoB,MAAM,SAASC,UAAQ,EAAC7C,UAAU,cAAc8C,OAAK,EAACC,YAAU,EAACC,SAAO,aAC9E,SAAC,IAAU,CAACpC,MAAM,QAAO,UACvB,UAAC,KAAS,YACR,SAAC,KAAgB,UAAC,YAClB,SAAC,KAAgB,UAAC,UAClB,SAAC,KAAgB,UAAC,aAClB,SAAC,KAAgB,UAAC,iBAGtB,SAAC,KAAU,UACR3B,IACC,SAAC,EAAU,CACTjB,MAtIG,EAwIHC,KAAMgB,EAAOgE,QAAO,SAACC,GAAG,OAAKA,EAAI9D,YAAcqC,EAAQC,QAAQ,IAAE,GACjExD,IAAK,EACLC,WAAYA,EACZC,IAAS,OAAJU,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KAAKN,UAJX,kBAczB,C","sources":["components/FamilyTree.js","views/users/LeftRightTeam.js","components/FamilyList.js","views/users/GetUsers.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nimport { TreeNode } from 'react-organizational-chart'\r\nimport PropTypes from 'prop-types'\r\nimport { usersApi } from 'src/APIs'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport brand from 'src/assets/sonaxmultitrade.png'\r\nimport { CImage } from '@coreui/react'\r\n\r\nfunction FamilyTree({ count, item, num, StyledNode, pId }) {\r\n  const navigation = useNavigate()\r\n  const { childId, parentId } = item\r\n\r\n  useEffect(() => {\r\n    count += 1\r\n  }, [])\r\n\r\n  const renderBranch = () => {\r\n    return (\r\n      <StyledNode>\r\n        <div\r\n          // role={!childId.uId ? 'button' : ''}\r\n          role=\"button\"\r\n          onClick={() =>\r\n            !childId.uId\r\n              ? navigation('/add', {\r\n                  state: {\r\n                    pId: typeof pId === 'string' ? pId : parentId,\r\n                    placement: num === 0 ? 'Left' : 'Right',\r\n                  },\r\n                })\r\n              : navigation('/users', {\r\n                  state: {\r\n                    userId: childId._id,\r\n                  },\r\n                })\r\n          }\r\n        >\r\n          <CImage src={brand} height={50} alt=\"Logo\" />\r\n          <div\r\n            className={\r\n              !childId.uId\r\n                ? 'border border-success tree-content app-bg-2'\r\n                : `border border-success tree-content ${\r\n                    !childId.isCompleted ? 'app-bg-inactive' : 'app-bg-active'\r\n                  }`\r\n            }\r\n          >\r\n            <div>{childId.uId ? childId.uId : ''}</div>\r\n            <div>{childId.firstName}</div>\r\n          </div>\r\n        </div>\r\n      </StyledNode>\r\n    )\r\n  }\r\n\r\n  const { isloading, data: resp } = usersApi.useGetTeams(childId._id)\r\n  var pD = resp?.status === 200 && resp?.data?.parentId\r\n  var childs = resp?.status === 200 ? resp?.data?.childs : []\r\n\r\n  const hasChildren = childs && childs.length !== 0\r\n\r\n  if (hasChildren && resp?.data?.childs[0].placement === 'Right') {\r\n    childs = resp?.data?.childs.reverse()\r\n  }\r\n\r\n  const newChild = () => {\r\n    if (hasChildren && count < 6) {\r\n      return childs.map((child, n) => {\r\n        return isloading ? (\r\n          <>OK</>\r\n        ) : (\r\n          <FamilyTree key={n} item={child} num={n} StyledNode={StyledNode} pId={pD} />\r\n        )\r\n      })\r\n    }\r\n    return null\r\n  }\r\n\r\n  const StyledTreeExample = () => (\r\n    <TreeNode key={num} label={renderBranch()}>\r\n      {newChild()}\r\n    </TreeNode>\r\n  )\r\n\r\n  return StyledTreeExample()\r\n}\r\n\r\nexport default FamilyTree\r\n\r\nFamilyTree.propTypes = {\r\n  item: PropTypes.object,\r\n  num: PropTypes.number,\r\n  pId: PropTypes.any,\r\n  StyledNode: PropTypes.any,\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { usersApi } from 'src/APIs'\r\nimport {\r\n  CBadge,\r\n  CHeader,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\n\r\nfunction LeftRightTeam({ position, userId }) {\r\n  const { isLoading, data: resp } = usersApi.useGetTeamList(position, userId)\r\n\r\n  return (\r\n    <CRow className=\"table-row\">\r\n      <CHeader>\r\n        <h5>\r\n          <CBadge color={'primary'}>{'Total: ' + resp?.total}</CBadge>\r\n        </h5>\r\n        <h5>\r\n          <CBadge color={'success'}>{'Active: ' + resp?.active}</CBadge>\r\n        </h5>\r\n        <h5>\r\n          <CBadge color={'danger'}>{'Inactive: ' + resp?.inActive}</CBadge>\r\n        </h5>\r\n      </CHeader>\r\n      <CTable align=\"middle\" bordered className=\"mb-0 border\" hover responsive striped>\r\n        <CTableHead color=\"light\">\r\n          <CTableRow>\r\n            <CTableHeaderCell>S. No.</CTableHeaderCell>\r\n            <CTableHeaderCell>Name</CTableHeaderCell>\r\n            <CTableHeaderCell>User Id</CTableHeaderCell>\r\n            <CTableHeaderCell>Status</CTableHeaderCell>\r\n          </CTableRow>\r\n        </CTableHead>\r\n        <CTableBody>\r\n          {!isLoading &&\r\n            resp?.data.map((item, index) => (\r\n              <CTableRow v-for=\"item in tableItems\" key={index}>\r\n                <CTableDataCell>{index + 1}</CTableDataCell>\r\n                <CTableDataCell>\r\n                  <div>{item.firstName + ' ' + item.lastName}</div>\r\n                  <div className=\"small text-medium-emphasis\">\r\n                    <span>{'New |'}</span> Registered on: {'01/02/2023'}\r\n                  </div>\r\n                </CTableDataCell>\r\n\r\n                <CTableDataCell>{item.uId}</CTableDataCell>\r\n                <CTableDataCell>\r\n                  <h5>\r\n                    <CBadge id={item._id} color={item.isCompleted ? 'success' : 'danger'}>\r\n                      {item.isCompleted ? 'Active' : 'Inactive'}\r\n                    </CBadge>\r\n                  </h5>\r\n                </CTableDataCell>\r\n              </CTableRow>\r\n            ))}\r\n        </CTableBody>\r\n      </CTable>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default LeftRightTeam\r\n\r\nLeftRightTeam.propTypes = {\r\n  position: PropTypes.string,\r\n  userId: PropTypes.any,\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport { usersApi } from 'src/APIs'\r\nimport { CBadge, CTableDataCell, CTableRow } from '@coreui/react'\r\nimport { dateHelper } from 'src/helpers'\r\nlet users = []\r\nfunction FamilyList({ count, item, num, StyledNode }) {\r\n  const { childId } = item\r\n  users = [...users, childId?._id !== null && childId]\r\n  useEffect(() => {\r\n    count += 1\r\n  }, [])\r\n\r\n  const { isloading, data: resp } = usersApi.useGetTeams(childId?._id)\r\n  var pD = resp?.status === 200 && resp?.data?.parentId\r\n  var childs = resp?.status === 200 ? resp?.data?.childs : []\r\n\r\n  const hasChildren = childs && childs.length !== 0\r\n  // sendDataToParent(arrUnique(filterUsers()))\r\n  const newChild = () => {\r\n    if (hasChildren) {\r\n      return childs.map((child, n) => {\r\n        return isloading && child?.childId?._id === null ? (\r\n          <>OK</>\r\n        ) : (\r\n          <FamilyList count={count++} key={n} item={child} num={n} StyledNode={StyledNode} />\r\n        )\r\n      })\r\n    }\r\n    return null\r\n  }\r\n\r\n  const StyledTreeExample = () => (\r\n    <>\r\n      {childId._id !== null && (\r\n        <CTableRow v-for=\"item in tableItems\" key={num}>\r\n          <CTableDataCell>{'#'}</CTableDataCell>\r\n          <CTableDataCell>\r\n            <div>{childId?.firstName + ' ' + childId?.lastName}</div>\r\n            <div className=\"small text-medium-emphasis\">\r\n              <span>{'New |'}</span> Registered on: {dateHelper.formatRegister(childId?.createdAt)}\r\n            </div>\r\n          </CTableDataCell>\r\n\r\n          <CTableDataCell>{childId?.uId}</CTableDataCell>\r\n          <CTableDataCell>\r\n            <h5>\r\n              <CBadge id={childId?._id} color={childId?.isCompleted ? 'success' : 'danger'}>\r\n                {childId?.isCompleted ? 'Active' : 'Inactive'}\r\n              </CBadge>\r\n            </h5>\r\n          </CTableDataCell>\r\n        </CTableRow>\r\n      )}\r\n      {newChild()}\r\n    </>\r\n  )\r\n\r\n  return StyledTreeExample()\r\n}\r\n\r\nexport default FamilyList\r\n\r\nFamilyList.propTypes = {\r\n  item: PropTypes.any,\r\n  num: PropTypes.number,\r\n  StyledNode: PropTypes.any,\r\n}\r\n\r\nfunction filterUsers() {\r\n  if (users.length > 0) {\r\n    users = users.filter((res) => res !== false)\r\n  }\r\n  return users\r\n}\r\n\r\nfunction arrUnique(arr) {\r\n  var clean = arr.filter((arr, index, self) => index === self.findIndex((t) => t.uId === arr.uId))\r\n\r\n  return clean\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { usersApi } from 'src/APIs'\r\nimport { Tree } from 'react-organizational-chart'\r\nimport styled from 'styled-components'\r\nimport { getProfileData } from 'src/helpers/tokenLS'\r\nimport brand from 'src/assets/sonaxmultitrade.png'\r\nimport FamilyTree from 'src/components/FamilyTree'\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CHeader,\r\n  CImage,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilArrowTop } from '@coreui/icons'\r\nimport LeftRightTeam from './LeftRightTeam'\r\nimport FamilyList from 'src/components/FamilyList'\r\n\r\nconst StyledNode = styled.div`\r\n  padding: 5px;\r\n  display: inline-block;\r\n`\r\nfunction GetUsers() {\r\n  let instancesCount = 0\r\n  const { state = null } = useLocation()\r\n  const location = useLocation()\r\n  const navigate = useNavigate()\r\n  const user = getProfileData()\r\n  const [reload, setReload] = useState(1)\r\n  const [tabs, setTabs] = useState({ total: 0, active: 0, inActive: 0 })\r\n  const [visible, setVisible] = useState({\r\n    visible: false,\r\n    position: 'Left',\r\n  })\r\n  useEffect(() => {\r\n    navigate(location.pathname, {})\r\n  }, [reload])\r\n  const userId = state && state?.userId ? state?.userId : user._id\r\n  const { data } = usersApi.useGetTeams(userId)\r\n  const { isLoading: load, data: tbs, refetch } = usersApi.useGetTeamList(visible.position, userId)\r\n  var childs = data?.data?.childs\r\n  if (data?.data?.childs[0].placement === 'Right') {\r\n    childs = data?.data?.childs.reverse()\r\n  }\r\n  useEffect(() => {\r\n    refetch()\r\n  }, [visible.position])\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol xs={12}>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>\r\n              <strong>All Team&apos;s Tree</strong>\r\n              <CButton\r\n                color=\"primary mx-2\"\r\n                onClick={() => setVisible({ visible: !visible.visible, position: 'Right' })}\r\n                className=\"float-end\"\r\n              >\r\n                Right\r\n              </CButton>\r\n              <CButton\r\n                color=\"primary mx-2\"\r\n                onClick={() => setVisible({ visible: !visible.visible, position: 'Left' })}\r\n                className=\"float-end\"\r\n              >\r\n                Left\r\n              </CButton>\r\n            </CCardHeader>\r\n            <CCardBody className=\"divScroll\">\r\n              {state && state?.userId && (\r\n                <CButton size=\"sm\" onClick={() => setReload(Math.random())}>\r\n                  {'Go to top'}\r\n                  <CIcon icon={cilArrowTop} />\r\n                </CButton>\r\n              )}\r\n              <Tree\r\n                lineWidth={'2px'}\r\n                lineColor={'green'}\r\n                lineBorderRadius={'10px'}\r\n                label={\r\n                  <StyledNode>\r\n                    <CImage src={brand} height={50} alt=\"Logo\" />\r\n                    <div\r\n                      className={`border border-success tree-content ${\r\n                        !state\r\n                          ? data?.data?.parentId?.isCompleted\r\n                            ? 'app-bg-active'\r\n                            : 'app-bg-top'\r\n                          : data?.data?.parentId?.isCompleted\r\n                          ? 'app-bg-active'\r\n                          : 'app-bg-inactive'\r\n                      }`}\r\n                    >\r\n                      <div>{data?.data?.parentId?.uId ? data?.data?.parentId?.uId : ''}</div>\r\n                      <div>{data?.data?.parentId?.firstName}</div>\r\n                    </div>\r\n                  </StyledNode>\r\n                }\r\n              >\r\n                {childs &&\r\n                  childs?.map((child, n) => {\r\n                    return (\r\n                      <FamilyTree\r\n                        count={instancesCount}\r\n                        key={n}\r\n                        item={child}\r\n                        num={n}\r\n                        StyledNode={StyledNode}\r\n                        pId={data?.data.parentId}\r\n                      />\r\n                    )\r\n                  })}\r\n              </Tree>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n      <CModal\r\n        fullscreen=\"lg\"\r\n        visible={visible.visible}\r\n        onClose={() => {\r\n          setVisible({ ...visible, visible: false })\r\n        }}\r\n      >\r\n        <CModalHeader>\r\n          <CModalTitle>{visible.position} Side Team List</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody className=\"overflow-auto\">\r\n          <CRow>\r\n            {!load && (\r\n              <CHeader>\r\n                <h5>\r\n                  <CBadge color={'primary'}>{'Total: ' + tbs?.total}</CBadge>\r\n                </h5>\r\n                <h5>\r\n                  <CBadge color={'success'}>{'Active: ' + tbs?.active}</CBadge>\r\n                </h5>\r\n                <h5>\r\n                  <CBadge color={'danger'}>{'Inactive: ' + tbs?.inActive}</CBadge>\r\n                </h5>\r\n              </CHeader>\r\n            )}\r\n            <CTable align=\"middle\" bordered className=\"mb-0 border\" hover responsive striped>\r\n              <CTableHead color=\"light\">\r\n                <CTableRow>\r\n                  <CTableHeaderCell>S. No.</CTableHeaderCell>\r\n                  <CTableHeaderCell>Name</CTableHeaderCell>\r\n                  <CTableHeaderCell>User Id</CTableHeaderCell>\r\n                  <CTableHeaderCell>Status</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {childs && (\r\n                  <FamilyList\r\n                    count={instancesCount}\r\n                    key={0}\r\n                    item={childs.filter((res) => res.placement === visible.position)[0]}\r\n                    num={0}\r\n                    StyledNode={StyledNode}\r\n                    pId={data?.data.parentId}\r\n                  />\r\n                )}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CRow>\r\n        </CModalBody>\r\n      </CModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GetUsers\r\n"],"names":["FamilyTree","count","item","num","StyledNode","pId","navigation","useNavigate","childId","parentId","useEffect","usersApi","_id","isloading","resp","data","pD","status","childs","hasChildren","length","placement","reverse","label","role","onClick","uId","state","userId","src","brand","height","alt","className","isCompleted","firstName","map","child","n","users","FamilyList","lastName","dateHelper","createdAt","id","color","styled","useLocation","location","navigate","user","getProfileData","useState","reload","setReload","total","active","inActive","visible","position","setVisible","pathname","load","isLoading","tbs","refetch","xs","size","Math","random","icon","cilArrowTop","lineWidth","lineColor","lineBorderRadius","fullscreen","onClose","align","bordered","hover","responsive","striped","filter","res"],"sourceRoot":""}