{"version":3,"file":"static/js/205.e9ff22ea.chunk.js","mappings":"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","sources":["views/adminUsers/GetUsers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useQueryClient } from 'react-query'\r\nimport { adminApi } from 'src/APIs'\r\nimport Pagination from 'react-js-pagination'\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { confirmAlert } from 'react-confirm-alert'\r\nimport { dateHelper } from 'src/helpers'\r\nimport ResponsivePagination from 'react-responsive-pagination'\r\nimport 'react-responsive-pagination/themes/classic.css'\r\n\r\nfunction GetUsers() {\r\n  const navigate = useNavigate()\r\n  const queryClient = useQueryClient()\r\n  const [limit, setLimit] = useState(10)\r\n  const [page, setPage] = useState(1)\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n\r\n  const [search, setSearch] = useState('')\r\n  const { isLoading, data: resp, refetch } = adminApi.useGetUsers(limit, currentPage, search)\r\n  const { data: usersList } = adminApi.useGetAllUsers()\r\n  const totalUsers = resp?.totalUsers\r\n  const users = resp?.users\r\n\r\n  const update = adminApi.useUpdateUser()\r\n  const updateSponser = adminApi.useUpdateSponserUser()\r\n\r\n  const statusHandler = async (event) => {\r\n    const id = event.target.id\r\n    confirmAlert({\r\n      title: `Update this user`,\r\n      message: `Are you sure?`,\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: async () => {\r\n            const resp = await update.mutateAsync(id)\r\n            if (resp?.status === 200) {\r\n              refetch()\r\n            }\r\n          },\r\n        },\r\n        {\r\n          label: 'No',\r\n          // onClick: () => alert(\"Click No\")\r\n        },\r\n      ],\r\n    })\r\n  }\r\n\r\n  const directHandler = async (id, uid) => {\r\n    console.log(id, '===', uid)\r\n    confirmAlert({\r\n      title: `Update this user`,\r\n      message: `Are you sure?`,\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: async () => {\r\n            const resp = await updateSponser.mutateAsync({ sid: id, uid })\r\n            if (resp?.status === 200) {\r\n              refetch()\r\n            }\r\n          },\r\n        },\r\n        {\r\n          label: 'No',\r\n          // onClick: () => alert(\"Click No\")\r\n        },\r\n      ],\r\n    })\r\n  }\r\n\r\n  const handleSearch = (value) => {\r\n    setSearch(value)\r\n    setPage(1)\r\n  }\r\n\r\n  const onChangeHandle = (e) => {\r\n    setSearch(e.target.value)\r\n    setPage(1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleSearch('')\r\n  }, [])\r\n\r\n  const updateUser = (id) => {\r\n    navigate(`/${id}`)\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol md={12}>\r\n        <CCard>\r\n          <CCardHeader>\r\n            <strong>All Users</strong>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"mb-4\">\r\n              <CCol xs={6}>\r\n                <CForm className=\"d-flex\">\r\n                  <CFormInput\r\n                    type=\"search\"\r\n                    className=\"me-2\"\r\n                    placeholder={`Search: 'User ID'`}\r\n                    name=\"search\"\r\n                    value={search}\r\n                    onChange={onChangeHandle}\r\n                  />\r\n                </CForm>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow className=\"table-row\">\r\n              <CTable align=\"middle\" bordered className=\"mb-0 border\" hover responsive striped>\r\n                <CTableHead color=\"light\">\r\n                  <CTableRow>\r\n                    <CTableHeaderCell>S. No.</CTableHeaderCell>\r\n                    <CTableHeaderCell>Name</CTableHeaderCell>\r\n                    <CTableHeaderCell>User Id</CTableHeaderCell>\r\n                    <CTableHeaderCell>Status</CTableHeaderCell>\r\n                    <CTableHeaderCell>Sponser By</CTableHeaderCell>\r\n                    <CTableHeaderCell>Action</CTableHeaderCell>\r\n                  </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                  {users?.map((item, index) => {\r\n                    var sponserBy = item?.sponserBy && item?.sponserBy[0]\r\n                    var sponser = sponserBy?.childs[0]?.sponserBy\r\n                    return (\r\n                      <CTableRow v-for=\"item in tableItems\" key={index}>\r\n                        <CTableDataCell>{index + 1}</CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <div>{item.firstName + ' ' + item.lastName}</div>\r\n                          <div className=\"small text-medium-emphasis\">\r\n                            Registered on: {dateHelper.formatRegister(item.createdAt)}\r\n                          </div>\r\n                          <div className=\"small text-medium-emphasis\">\r\n                            {item.isCompleted &&\r\n                              `Active on: ${dateHelper.formatRegister(item.updatedAt)}`}\r\n                          </div>\r\n                        </CTableDataCell>\r\n\r\n                        <CTableDataCell>{item.uId}</CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <h5>\r\n                            <CBadge\r\n                              id={item._id}\r\n                              onClick={statusHandler}\r\n                              role=\"button\"\r\n                              color={item.isCompleted ? 'success' : 'danger'}\r\n                            >\r\n                              {item.isCompleted ? 'Active' : 'Inactive'}\r\n                            </CBadge>\r\n                          </h5>\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>\r\n                          {sponser ? (\r\n                            <>\r\n                              <div>\r\n                                {sponser?.firstName +\r\n                                  ' ' +\r\n                                  sponser?.lastName +\r\n                                  ' (' +\r\n                                  sponser?.uId +\r\n                                  ')'}\r\n                              </div>\r\n                              <div className=\"small text-medium-emphasis\">\r\n                                Position: <b>{sponserBy?.childs[0]?.placement}</b>\r\n                              </div>\r\n                            </>\r\n                          ) : (\r\n                            <div className=\"mb-3\">\r\n                              <CFormSelect\r\n                                className=\"selectpicker\"\r\n                                aria-label=\"Default select example\"\r\n                                name=\"sponserId\"\r\n                                onChange={(e) => directHandler(e.target.value, item._id)}\r\n                                data-live-search=\"true\"\r\n                              >\r\n                                {isLoading && <option value=\"\">Loading..</option>}\r\n\r\n                                <option value=\"\">Select Sponser</option>\r\n                                {usersList?.users.map((res, i) => (\r\n                                  <option\r\n                                    key={i}\r\n                                    value={res._id}\r\n                                  >{`${res.firstName} ${res.lastName} (${res.uId})`}</option>\r\n                                ))}\r\n                              </CFormSelect>\r\n                            </div>\r\n                          )}\r\n                        </CTableDataCell>\r\n                        <CTableDataCell className=\"gap-2\">\r\n                          <h5\r\n                            role=\"button\"\r\n                            onClick={() =>\r\n                              navigate('/payments', {\r\n                                state: {\r\n                                  id: item._id,\r\n                                  name: item.firstName + ' ' + item.lastName,\r\n                                  uId: item.uId,\r\n                                },\r\n                              })\r\n                            }\r\n                          >\r\n                            <CBadge color=\"success\">View</CBadge>\r\n                          </h5>\r\n                          <h5 onClick={() => updateUser(item._id)}>\r\n                            <CBadge role=\"button\" color=\"success\">\r\n                              Edit\r\n                            </CBadge>\r\n                          </h5>\r\n                        </CTableDataCell>\r\n                      </CTableRow>\r\n                    )\r\n                  })}\r\n                </CTableBody>\r\n              </CTable>\r\n            </CRow>\r\n            {!isLoading && (\r\n              <div className=\"mt-4\">\r\n                <ResponsivePagination\r\n                  current={currentPage}\r\n                  total={Math.ceil(totalUsers / limit)}\r\n                  onPageChange={setCurrentPage}\r\n                />\r\n              </div>\r\n            )}\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default GetUsers\r\n"],"names":["navigate","useNavigate","useQueryClient","useState","limit","setPage","currentPage","setCurrentPage","search","setSearch","adminApi","isLoading","resp","data","refetch","usersList","totalUsers","users","update","updateSponser","statusHandler","event","id","target","confirmAlert","title","message","buttons","label","onClick","mutateAsync","status","directHandler","uid","console","log","sid","useEffect","md","className","xs","type","placeholder","name","value","onChange","e","align","bordered","hover","responsive","striped","color","map","item","index","sponserBy","sponser","childs","firstName","lastName","dateHelper","createdAt","isCompleted","updatedAt","uId","_id","role","placement","res","i","state","current","total","Math","ceil","onPageChange"],"sourceRoot":""}