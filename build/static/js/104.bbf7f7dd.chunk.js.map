{"version":3,"file":"static/js/104.bbf7f7dd.chunk.js","mappings":"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","sources":["components/FamilyTree.js","views/users/LeftRightTeam.js","views/users/GetUsers.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nimport { TreeNode } from 'react-organizational-chart'\r\nimport PropTypes from 'prop-types'\r\nimport { usersApi } from 'src/APIs'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport brand from 'src/assets/sonaxmultitrade.png'\r\nimport { CImage } from '@coreui/react'\r\n\r\nfunction FamilyTree({ count, item, num, StyledNode, pId }) {\r\n  const navigation = useNavigate()\r\n  const { childId, parentId } = item\r\n\r\n  useEffect(() => {\r\n    count += 1\r\n  }, [])\r\n\r\n  const renderBranch = () => {\r\n    return (\r\n      <StyledNode>\r\n        <div\r\n          // role={!childId.uId ? 'button' : ''}\r\n          role=\"button\"\r\n          onClick={() =>\r\n            !childId.uId\r\n              ? navigation('/add', {\r\n                  state: {\r\n                    pId: typeof pId === 'string' ? pId : parentId,\r\n                    placement: num === 0 ? 'Left' : 'Right',\r\n                  },\r\n                })\r\n              : navigation('/users', {\r\n                  state: {\r\n                    userId: childId._id,\r\n                  },\r\n                })\r\n          }\r\n        >\r\n          <CImage src={brand} height={50} alt=\"Logo\" />\r\n          <div\r\n            className={\r\n              !childId.uId\r\n                ? 'border border-success tree-content app-bg-2'\r\n                : `border border-success tree-content ${\r\n                    !childId.isCompleted ? 'app-bg-inactive' : 'app-bg-active'\r\n                  }`\r\n            }\r\n          >\r\n            <div>{childId.uId ? childId.uId : ''}</div>\r\n            <div>{childId.firstName}</div>\r\n          </div>\r\n        </div>\r\n      </StyledNode>\r\n    )\r\n  }\r\n\r\n  const { isloading, data: resp } = usersApi.useGetTeams(childId._id)\r\n  var pD = resp?.status === 200 && resp?.data?.parentId\r\n  var childs = resp?.status === 200 ? resp?.data?.childs : []\r\n\r\n  const hasChildren = childs && childs.length !== 0\r\n\r\n  if (hasChildren && resp?.data?.childs[0].placement === 'Right') {\r\n    childs = resp?.data?.childs.reverse()\r\n  }\r\n\r\n  const newChild = () => {\r\n    if (hasChildren && count < 6) {\r\n      return childs.map((child, n) => {\r\n        return isloading ? (\r\n          <>OK</>\r\n        ) : (\r\n          <FamilyTree key={n} item={child} num={n} StyledNode={StyledNode} pId={pD} />\r\n        )\r\n      })\r\n    }\r\n    return null\r\n  }\r\n\r\n  const StyledTreeExample = () => (\r\n    <TreeNode key={num} label={renderBranch()}>\r\n      {newChild()}\r\n    </TreeNode>\r\n  )\r\n\r\n  return StyledTreeExample()\r\n}\r\n\r\nexport default FamilyTree\r\n\r\nFamilyTree.propTypes = {\r\n  item: PropTypes.object,\r\n  num: PropTypes.number,\r\n  pId: PropTypes.any,\r\n  StyledNode: PropTypes.any,\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { usersApi } from 'src/APIs'\r\nimport {\r\n  CBadge,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\n\r\nfunction LeftRightTeam({ position, userId }) {\r\n  var child = []\r\n  var done = false\r\n\r\n  getTeam(userId)\r\n  function getTeam(userId) {\r\n    const { isLoading, data: resp } = usersApi.useGetTeams(userId)\r\n    if (!isLoading) {\r\n      var childs = resp?.status === 200 ? resp?.data?.childs : []\r\n\r\n      const chi = childs.filter((child) => child.placement === position)\r\n      if (chi && chi.length !== 0 && chi[0]?.childId?._id !== null) {\r\n        child = [...child, chi[0]?.childId?._id !== null && chi[0].childId]\r\n        getTeam(chi[0]?.childId?._id)\r\n      }\r\n    }\r\n    done = true\r\n  }\r\n\r\n  return (\r\n    <CRow className=\"table-row\">\r\n      <CTable align=\"middle\" bordered className=\"mb-0 border\" hover responsive striped>\r\n        <CTableHead color=\"light\">\r\n          <CTableRow>\r\n            <CTableHeaderCell>S. No.</CTableHeaderCell>\r\n            <CTableHeaderCell>Name</CTableHeaderCell>\r\n            <CTableHeaderCell>User Id</CTableHeaderCell>\r\n            <CTableHeaderCell>Status</CTableHeaderCell>\r\n          </CTableRow>\r\n        </CTableHead>\r\n        <CTableBody>\r\n          {done &&\r\n            child?.map((item, index) => (\r\n              <CTableRow v-for=\"item in tableItems\" key={index}>\r\n                <CTableDataCell>{index + 1}</CTableDataCell>\r\n                <CTableDataCell>\r\n                  <div>{item.firstName + ' ' + item.lastName}</div>\r\n                  <div className=\"small text-medium-emphasis\">\r\n                    <span>{'New |'}</span> Registered on: {'01/02/2023'}\r\n                  </div>\r\n                </CTableDataCell>\r\n\r\n                <CTableDataCell>{item.uId}</CTableDataCell>\r\n                <CTableDataCell>\r\n                  <h5>\r\n                    <CBadge id={item._id} color={item.isCompleted ? 'success' : 'danger'}>\r\n                      {item.isCompleted ? 'Active' : 'Inactive'}\r\n                    </CBadge>\r\n                  </h5>\r\n                </CTableDataCell>\r\n              </CTableRow>\r\n            ))}\r\n        </CTableBody>\r\n      </CTable>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default LeftRightTeam\r\n\r\nLeftRightTeam.propTypes = {\r\n  position: PropTypes.string,\r\n  userId: PropTypes.any,\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { usersApi } from 'src/APIs'\r\nimport { Tree } from 'react-organizational-chart'\r\nimport styled from 'styled-components'\r\nimport { getProfileData } from 'src/helpers/tokenLS'\r\nimport brand from 'src/assets/sonaxmultitrade.png'\r\nimport FamilyTree from 'src/components/FamilyTree'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CImage,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilArrowTop } from '@coreui/icons'\r\nimport LeftRightTeam from './LeftRightTeam'\r\n\r\nconst StyledNode = styled.div`\r\n  padding: 5px;\r\n  display: inline-block;\r\n`\r\nfunction GetUsers() {\r\n  let instancesCount = 0\r\n  const { state = null } = useLocation()\r\n  const location = useLocation()\r\n  const navigate = useNavigate()\r\n  const user = getProfileData()\r\n  const [reload, setReload] = useState(1)\r\n  const [visible, setVisible] = useState({\r\n    visible: false,\r\n    position: '',\r\n  })\r\n  useEffect(() => {\r\n    navigate(location.pathname, {})\r\n  }, [reload])\r\n  const userId = state && state?.userId ? state?.userId : user._id\r\n  const { isLoading, data } = usersApi.useGetTeams(userId)\r\n  var childs = data?.data?.childs\r\n  if (data?.data?.childs[0].placement === 'Right') {\r\n    childs = data?.data?.childs.reverse()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol xs={12}>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>\r\n              <strong>All Team&apos;s Tree</strong>\r\n              {/* <CButton\r\n                color=\"primary mx-2\"\r\n                onClick={() => setVisible(!visible)}\r\n                className=\"float-end\"\r\n              >\r\n                Direct: {data?.direct.length}\r\n              </CButton> */}\r\n              <CButton\r\n                color=\"primary mx-2\"\r\n                onClick={() => setVisible({ visible: !visible.visible, position: 'Right' })}\r\n                className=\"float-end\"\r\n              >\r\n                Right\r\n              </CButton>\r\n              <CButton\r\n                color=\"primary mx-2\"\r\n                onClick={() => setVisible({ visible: !visible.visible, position: 'Left' })}\r\n                className=\"float-end\"\r\n              >\r\n                Left\r\n              </CButton>\r\n            </CCardHeader>\r\n            <CCardBody className=\"divScroll\">\r\n              {state && state?.userId && (\r\n                <CButton size=\"sm\" onClick={() => setReload(Math.random())}>\r\n                  {'Go to top'}\r\n                  <CIcon icon={cilArrowTop} />\r\n                </CButton>\r\n              )}\r\n              <Tree\r\n                lineWidth={'2px'}\r\n                lineColor={'green'}\r\n                lineBorderRadius={'10px'}\r\n                label={\r\n                  <StyledNode>\r\n                    <CImage src={brand} height={50} alt=\"Logo\" />\r\n                    <div\r\n                      className={`border border-success tree-content ${\r\n                        !state\r\n                          ? data?.data?.parentId?.isCompleted\r\n                            ? 'app-bg-active'\r\n                            : 'app-bg-top'\r\n                          : data?.data?.parentId?.isCompleted\r\n                          ? 'app-bg-active'\r\n                          : 'app-bg-inactive'\r\n                      }`}\r\n                    >\r\n                      <div>{data?.data?.parentId?.uId ? data?.data?.parentId?.uId : ''}</div>\r\n                      <div>{data?.data?.parentId?.firstName}</div>\r\n                    </div>\r\n                  </StyledNode>\r\n                }\r\n              >\r\n                {childs &&\r\n                  childs?.map((child, n) => {\r\n                    return (\r\n                      <FamilyTree\r\n                        count={instancesCount}\r\n                        key={n}\r\n                        item={child}\r\n                        num={n}\r\n                        StyledNode={StyledNode}\r\n                        pId={data?.data.parentId}\r\n                      />\r\n                    )\r\n                  })}\r\n              </Tree>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n      <CModal\r\n        fullscreen=\"lg\"\r\n        visible={visible.visible}\r\n        onClose={() => setVisible({ ...visible, visible: false })}\r\n      >\r\n        <CModalHeader>\r\n          <CModalTitle>{visible.position} Side Team List</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          {!isLoading && <LeftRightTeam position={visible.position} userId={userId} />}\r\n        </CModalBody>\r\n      </CModal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GetUsers\r\n"],"names":["FamilyTree","count","item","num","StyledNode","pId","navigation","useNavigate","childId","parentId","useEffect","usersApi","_id","isloading","resp","data","pD","status","childs","hasChildren","length","placement","reverse","label","role","onClick","uId","state","userId","src","brand","height","alt","className","isCompleted","firstName","map","child","n","position","done","getTeam","isLoading","chi","filter","align","bordered","hover","responsive","striped","color","index","lastName","id","styled","useLocation","location","navigate","user","getProfileData","useState","reload","setReload","visible","setVisible","pathname","xs","size","Math","random","icon","cilArrowTop","lineWidth","lineColor","lineBorderRadius","fullscreen","onClose"],"sourceRoot":""}